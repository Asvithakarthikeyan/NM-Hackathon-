# Movie Recommendation System using TMDB 5000 Dataset

import pandas as pd
import ast
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# Load datasets
movies = pd.read_csv('tmdb_5000_movies.csv')
credits = pd.read_csv('tmdb_5000_credits.csv')

# Merge both datasets on 'id' and 'movie_id'
movies = movies.merge(credits, left_on='id', right_on='movie_id')

# Select relevant columns
movies = movies[['movie_id', 'title_x', 'overview', 'genres', 'keywords', 'cast', 'crew']]
movies.rename(columns={'title_x': 'title'}, inplace=True)

# Function to extract list of names
def convert(text):
    try:
        return [i['name'] for i in ast.literal_eval(text)]
    except:
        return []

# Function to extract director name
def get_director(text):
    try:
        for i in ast.literal_eval(text):
            if i['job'] == 'Director':
                return i['name']
        return ''
    except:
        return ''

# Clean and transform the data
movies['genres'] = movies['genres'].apply(convert)
movies['keywords'] = movies['keywords'].apply(convert)
movies['cast'] = movies['cast'].apply(lambda x: convert(x)[:3])  # Top 3 actors
movies['crew'] = movies['crew'].apply(get_director)

# Fill NaN in overview and create tags
movies['overview'] = movies['overview'].fillna('')
movies['genres'] = movies['genres'].apply(lambda x: " ".join(x))
movies['keywords'] = movies['keywords'].apply(lambda x: " ".join(x))
movies['cast'] = movies['cast'].apply(lambda x: " ".join(x))

# Combine all features into one string
movies['tags'] = movies['overview'] + " " + movies['genres'] + " " + movies['keywords'] + " " + movies['cast'] + " " + movies['crew']

# Convert all tags to lowercase
movies['tags'] = movies['tags'].str.lower()

# Vectorize the tags column
cv = CountVectorizer(max_features=5000, stop_words='english')
vectors = cv.fit_transform(movies['tags']).toarray()

# Compute cosine similarity matrix
similarity = cosine_similarity(vectors)

# Recommendation function
def recommend(movie_title):
    movie_title = movie_title.lower()
    if movie_title not in movies['title'].str.lower().values:
        return "Movie not found!"

    index = movies[movies['title'].str.lower() == movie_title].index[0]
    distances = similarity[index]
    movie_list = sorted(list(enumerate(distances)), reverse=True, key=lambda x: x[1])[1:6]

    print(f"\nTop 5 recommendations for '{movies.iloc[index].title}':")
    for i in movie_list:
        print(movies.iloc[i[0]].title)

# Example usage
recommend('Inception')
